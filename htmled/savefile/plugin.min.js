const plg__sf__dlog = {
	title: 'Save File ...', // The dialog's title - displayed in the dialog header
	body: {
		type: 'panel', // The root body type - a Panel or TabPanel
		items: [ // A list of panel components
			{
				type: 'input', // component type
				name: 'asFile', // identifier
				inputMode: 'text',
				label: 'As filename ...', // text for the label
				placeholder: '', // placeholder text for the input
				enabled: true, // disabled state
				maximized: false // grow width to take as much space as possible
			},
			{
				type: 'checkbox', // component type
				name: 'down', // identifier
				label: 'Download only', // text for the label
				enabled: true // enabled state
			}
		],
	},
	initialData: {
		asFile: f_name
	},
	onSubmit: (api) => {
		const data = api.getData();
		const fnam = data.asFile.trim();
		const down = data.down;
		if (fnam) {
			if (down) {
				let anch = document.createElement('a');
				anch.download = fnam;
				anch.type = 'text/html';
				let htm = new Blob([d_head + tinymce.activeEditor.getContent() + d_tail]);
				anch.href = URL.createObjectURL(htm);
				anch.click();
				api.close();
			} else {
				let pData = new FormData();
				pData.append('savef',f_path+fnam);
				pData.append('fcontent', d_head + tinymce.activeEditor.getContent() + d_tail);
				fetch('', {method: 'POST', body: pData})
				.then(rslt => {if (!rslt.ok) throw new Error(`Failed to save file. ERROR: ${rslt.status}`); return rslt.text()})
				.then(resp => {
					if (!resp) {
						api.close();
					} else alert(resp);
				})
				.catch(err => alert(err));
			}
		} else {
			alert('Please specify a file name');
		}
	},
	buttons: [ // A list of footer buttons
		{
			type: 'cancel',
			name: 'cancelButton',
			text: 'Cancel'
		},
		{
			type: 'submit',
			name: 'submitButton',
			text: 'Save',
			buttonType: 'primary',
		}
	]
};

(function() {
	'use strict';
	var plgm = tinymce.util.Tools.resolve('tinymce.PluginManager');
	const askFileSave = () => tinymce.activeEditor.windowManager.open(plg__sf__dlog);
	plgm.add('savefile', (edt => {
		edt.ui.registry.addMenuItem('openfile', {
			icon: 'openfile',
			text: 'Open',
			onAction: () => doFileOpen()
		});
		edt.ui.registry.addMenuItem('savefile', {
			icon: 'savefile',
			text: 'Save File',
			onAction: () => askFileSave()
		});
	}));
})();
